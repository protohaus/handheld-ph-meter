/*
    The code in this file uses open source libraries provided by thecoderscorner

    DO NOT EDIT THIS FILE, IT WILL BE GENERATED EVERY TIME YOU USE THE UI
   DESIGNER INSTEAD EITHER PUT CODE IN YOUR SKETCH OR CREATE ANOTHER SOURCE
   FILE.

    All the variables you may need access to are marked extern in this file for
   easy use elsewhere.
*/

#include "simpleU8g2_menu.h"

#include <tcMenu.h>

// Global variable declarations

const PROGMEM ConnectorLocalInfo applicationInfo = {
    "pH Meter", "fddaa423-cb5c-4024-8f67-a9742f4457f3"};
U8g2GfxMenuConfig gfxConfig;
U8g2MenuRenderer renderer;

// Global Menu Item declarations

// const BooleanMenuInfo PROGMEM minfoSettingsSafetyLock = { "Safety lock", 6,
// 0xFFFF, 1, NO_CALLBACK, NAMING_TRUE_FALSE }; BooleanMenuItem
// menuSettingsSafetyLock(&minfoSettingsSafetyLock, false, NULL); const
// SubMenuInfo PROGMEM minfoSettings = { "Settings", 5, 0xFFFF, 0, NO_CALLBACK
// }; RENDERING_CALLBACK_NAME_INVOKE(fnSettingsRtCall, backSubItemRenderFn,
// "Settings", -1, NO_CALLBACK) BackMenuItem menuBackSettings(fnSettingsRtCall,
// &menuSettingsSafetyLock); SubMenuItem menuSettings(&minfoSettings,
// &menuBackSettings, NULL);
// const BooleanMenuInfo PROGMEM minfoFrozen = { "Frozen", 3, 6, 1, NO_CALLBACK,
// NAMING_YES_NO }; BooleanMenuItem menuFrozen(&minfoFrozen, false,
// &menuStartToasting);
// const char enumStrType_0[] PROGMEM = "Bread";
// const char enumStrType_1[] PROGMEM = "Bagel";
// const char enumStrType_2[] PROGMEM = "Pancake";
// const char* const enumStrType[] PROGMEM = {enumStrType_0, enumStrType_1,
//                                            enumStrType_2};
// const EnumMenuInfo PROGMEM minfoType = {"Type", 2,           4,
//                                         2,      NO_CALLBACK, enumStrType};
// EnumMenuItem menuType(&minfoType, 0, &menuStartToasting);
// const AnalogMenuInfo PROGMEM minfoToasterPower = {
//     "Messen", 1, 2, 10, NO_CALLBACK, 0, 1, "",
// };
// AnalogMenuItem menuToasterPower(&minfoToasterPower, 0, &menuType);

/// PH Sensor

const AnalogMenuInfo PROGMEM minfoStableReadingTotal = {
    "Messanzahl", 5, 0xFFFF, 30, onUpdateStableReadingTotal, 0, 0, ""};
AnalogMenuItem menuPhStableReadingTotal(&minfoStableReadingTotal, 0, NULL);

const AnalogMenuInfo PROGMEM minfoCalibrationTolerance = {
    "SD Toleranz", 5, 0xFFFF, 100, onUpdateCalibrationTolerance, 0, 100, ""};
AnalogMenuItem menuPhCalibrationTolerance(&minfoCalibrationTolerance, 0, &menuPhStableReadingTotal);

const AnyMenuInfo PROGMEM minfoCalibrate7Ph = {
    "7 pH Referenz", 4, 0xFFFF, 0, onStartCalibrate7Ph,
};
ActionMenuItem menuPhCalibrate7Ph(&minfoCalibrate7Ph, &menuPhCalibrationTolerance);

const AnyMenuInfo PROGMEM minfoCalibrate4Ph = {
    "4 pH Referenz", 3, 0xFFFF, 0, onStartCalibrate4Ph,
};
ActionMenuItem menuPhCalibrate4Ph(&minfoCalibrate4Ph, &menuPhCalibrate7Ph);


/// EC Sensor

const AnalogMenuInfo PROGMEM minfoEcStableReadingTotal = {
    "Messanzahl", 7, 0xFFFF, 30, onUpdateEcStableReadingTotal, 0, 0, ""};
AnalogMenuItem menuEcStableReadingTotal(&minfoEcStableReadingTotal, 0, NULL);

const AnalogMenuInfo PROGMEM minfoEcCalibrationTolerance = {
    "SD Toleranz", 6, 0xFFFF, 40, onUpdateEcCalibrationTolerance, 0, 2, ""};
AnalogMenuItem menuEcCalibrationTolerance(&minfoEcCalibrationTolerance, 0,
                                          &menuEcStableReadingTotal);

const AnyMenuInfo PROGMEM minfoEcCalibrate1413 = {
    "1413 \xb5S/cm", 5, 0xFFFF, 0, onStartEcCalibrate1413,
};
ActionMenuItem menuEcCalibrate1413(&minfoEcCalibrate1413,
                                   &menuEcCalibrationTolerance);

const AnyMenuInfo PROGMEM minfoEcCalibrate84 = {
    "84 \xb5S/cm", 4, 0xFFFF, 0, onStartEcCalibrate84,
};
ActionMenuItem menuEcCalibrate84(&minfoEcCalibrate84, &menuEcCalibrate1413);

const AnyMenuInfo PROGMEM minfoEcCalibrate84and1413 = {
    "84 und 1413 \xb5S/cm", 3, 0xFFFF, 0, onStartEcCalibrate84and1413,
};
ActionMenuItem menuEcCalibrate84and1413(&minfoEcCalibrate84and1413,
                                        &menuEcCalibrate84);


// Main Menu
/// pH Menu
SubMenuInfo PROGMEM minfoPhCalibrate = {
    "pH Kalibr.", 2, 0xFFFF, 0, NO_CALLBACK,
};
RENDERING_CALLBACK_NAME_INVOKE(fnPhCalibrateRtCall, backSubItemRenderFn,
                               "pH Kalibr.", -1, NO_CALLBACK)
BackMenuItem menuBackPhCalibrate(fnPhCalibrateRtCall, &menuPhCalibrate4Ph);
SubMenuItem menuPhCalibrate(&minfoPhCalibrate, &menuBackPhCalibrate, NULL);

/// EC Menu
SubMenuInfo PROGMEM minfoEcCalibrate = {
    "EC Kalibr.", 2, 0xFFFF, 0, NO_CALLBACK,
};
RENDERING_CALLBACK_NAME_INVOKE(fnEcCalibrateRtCall, backSubItemRenderFn,
                               "EC Kalibr.", -1, NO_CALLBACK)
BackMenuItem menuBackEcCalibrate(fnEcCalibrateRtCall, &menuEcCalibrate84and1413);
SubMenuItem menuEcCalibrate(&minfoEcCalibrate, &menuBackEcCalibrate, &menuPhCalibrate);

/// Messen
const AnyMenuInfo PROGMEM minfoStartEcMeasuring = {
    "Messen", 1, 0xFFFF, 0, onStartEcMeasuring,
};
ActionMenuItem menuStartEcMeasuring(&minfoStartEcMeasuring, &menuEcCalibrate);

// Set up code

void setupMenu() {
  prepareBasicU8x8Config(gfxConfig);
  renderer.setGraphicsDevice(&gfx, &gfxConfig);
  switches.initialise(ioUsingArduino(), true);
  menuMgr.initForUpDownOk(&renderer, &menuStartEcMeasuring, 25, 33, 32);
//   menuMgr.setBackButton(13);
}
